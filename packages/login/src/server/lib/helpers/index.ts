import { translations } from "../../../autoGeneratedTranslations";
import path from "path";
import fs from "fs";
import {
  getSettings,
  getBuildVersion,
  getAuthProviders,
  getCapabilities,
  getAppearanceTheme,
  getLogoUrls,
  getCurrentSsoSettings,
} from "@docspace/shared/api/settings";

import { getUser } from "@docspace/shared/api/people";

import { getClient, getScopeList } from "@docspace/shared/api/oauth";

import { IScope } from "@docspace/shared/utils/oauth/interfaces";

import { TenantStatus } from "@docspace/shared/enums";

export const getAssets = (): assetsType => {
  const manifest = fs.readFileSync(
    path.join(__dirname, "client/manifest.json"),
    "utf-8"
  );

  const assets = JSON.parse(manifest);

  return assets;
};

export const getScripts = (assets: assetsType): string[] | void => {
  if (!assets || typeof assets !== "object") return;
  const regTest = /static\/js\/.*/;
  const keys = [];

  for (let key in assets) {
    if (assets.hasOwnProperty(key) && regTest.test(key)) {
      keys.push(key);
    }
  }

  return keys;
};

export const loadPath = (language: string, nameSpace: string): string => {
  const path = translations?.get(language)?.get(nameSpace);

  return path;
};

export const getInitialState = async (
  query: MatchType,
  isAuth: boolean
): Promise<IInitialState> => {
  let portalSettings: IPortalSettings,
    buildInfo: IBuildInfo,
    providers: ProvidersType,
    capabilities: ICapabilities,
    availableThemes: IThemes,
    logoUrls: ILogoUrl[],
    ssoSettings: ISSOSettings;

  const baseSettings = [
    getSettings(),
    getBuildVersion(),
    getAppearanceTheme(),
    getLogoUrls(),
  ];

  const settings = [getAuthProviders(), getCapabilities()];

  if (!isAuth) settings.push(getCurrentSsoSettings());

  [portalSettings, buildInfo, availableThemes, logoUrls] =
    await Promise.all(baseSettings);

  if (portalSettings.tenantStatus !== TenantStatus.PortalRestore)
    [providers, capabilities, ssoSettings] = await Promise.all(settings);

  const currentColorScheme = availableThemes.themes.find((theme) => {
    return availableThemes.selected === theme.id;
  });

  const initialState: IInitialState = {
    portalSettings,
    buildInfo,
    providers,
    capabilities,
    match: query,
    currentColorScheme,
    logoUrls,
    ssoSettings,
  };

  return initialState;
};

//TODO: get client by id for links
export const getOAuthState = async (
  clientId: string,
  isAuth: boolean
): Promise<IOAuthState> => {
  const requests = [];

  requests.push(getClient(clientId, isAuth));

  if (isAuth) {
    requests.push(getUser());
    requests.push(getScopeList());
  }

  const [client, ...rest] = await Promise.all(requests);

  const state: IOAuthState = {
    clientId,
    state: "",
    isConsent: false,
    client,
    self: undefined,
    scopes: undefined,
  };

  if (isAuth) {
    state.self = rest[0] as ISelf;
    state.scopes = rest[1] as IScope[];
  }

  return state;
};
