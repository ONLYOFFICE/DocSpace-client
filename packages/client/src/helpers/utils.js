import { authStore, settingsStore } from "@docspace/shared/store";
import { getLanguage } from "@docspace/shared/utils";
import { toCommunityHostname } from "@docspace/shared/utils/common";

import { CategoryType } from "./constants";
import { FolderType, ShareAccessRights } from "@docspace/shared/enums";
import { translations } from "./autoGeneratedTranslations";
// import router from "SRC_DIR/router";

export const setDocumentTitle = (subTitle = "") => {
  const { isAuthenticated, product: currentModule } = authStore;
  const { organizationName } = settingsStore;

  let title;
  if (subTitle) {
    if (isAuthenticated && currentModule) {
      title = subTitle + " - " + currentModule.title;
    } else {
      title = subTitle + " - " + organizationName;
    }
  } else if (currentModule && organizationName) {
    title = currentModule.title + " - " + organizationName;
  } else {
    title = organizationName;
  }

  document.title = title;
};

export function loadLanguagePath(homepage, fixedNS = null) {
  return (lng, ns) => {
    const language = getLanguage(lng instanceof Array ? lng[0] : lng);

    const lngCollection = translations?.get(language);

    const data = lngCollection?.get(`${fixedNS || ns}`);

    if (!data) return `/locales/${language}/${fixedNS || ns}.json`;

    let path = data?.split("/");
    const length = path?.length;

    const isCommonPath = path[length - 1].indexOf("Common") > -1;

    path = `/${path[length - 3]}/${path[length - 2]}/${path[length - 1]}`;

    if (ns.length > 0 && ns[0] === "Common" && isCommonPath) {
      return `/static${path}`;
    }

    return path;
  };
}

export const checkIfModuleOld = (link) => {
  if (
    !link ||
    link.includes("files") ||
    link.includes("people") ||
    link.includes("settings")
  ) {
    return false;
  } else {
    return true;
  }
};

export const getLink = (link) => {
  if (!link) return;

  if (!checkIfModuleOld(link)) {
    return link;
  }

  if (link.includes("mail") || link.includes("calendar")) {
    link = link.replace("products", "addons");
  } else {
    link = link.replace("products", "Products");
    link = link.replace("crm", "CRM");
    link = link.replace("projects", "Projects");
  }

  const { protocol, hostname } = window.location;

  const communityHostname = toCommunityHostname(hostname);

  return `${protocol}//${communityHostname}${link}?desktop_view=true`;
};

export const onItemClick = (e) => {
  if (!e) return;
  e.preventDefault();

  const link = e.currentTarget.dataset.link;

  if (checkIfModuleOld(link)) {
    return window.open(link, "_blank");
  }

  // router.navigate(link);
};

export const getCategoryType = (location) => {
  let categoryType = CategoryType.Shared;
  const { pathname } = location;

  if (pathname.startsWith("/rooms")) {
    if (pathname.indexOf("personal") > -1) {
      categoryType = CategoryType.Personal;
    } else if (pathname.indexOf("shared") > -1) {
      categoryType =
        pathname.indexOf("shared/filter") > -1
          ? CategoryType.Shared
          : CategoryType.SharedRoom;
    } else if (pathname.indexOf("share") > -1) {
      categoryType = CategoryType.PublicRoom;
    } else if (pathname.indexOf("archive") > -1) {
      categoryType = CategoryType.Archive;
    }
  } else if (pathname.startsWith("/favorite")) {
    categoryType = CategoryType.Favorite;
  } else if (pathname.startsWith("/recent")) {
    categoryType = CategoryType.Recent;
  } else if (pathname.startsWith("/files/trash")) {
    categoryType = CategoryType.Trash;
  } else if (pathname.startsWith("/settings")) {
    categoryType = CategoryType.Settings;
  } else if (pathname.startsWith("/accounts")) {
    categoryType = CategoryType.Accounts;
  }

  return categoryType;
};

export const getCategoryTypeByFolderType = (folderType, parentId) => {
  switch (folderType) {
    case FolderType.Rooms:
      return parentId > 0 ? CategoryType.SharedRoom : CategoryType.Shared;

    case FolderType.Archive:
      return CategoryType.Archive;

    case FolderType.Favorites:
      return CategoryType.Favorite;

    case FolderType.Recent:
      return CategoryType.Recent;

    case FolderType.TRASH:
      return CategoryType.Trash;

    default:
      return CategoryType.Personal;
  }
};

export const getCategoryUrl = (categoryType, folderId = null) => {
  const cType = categoryType;

  switch (cType) {
    case CategoryType.Personal:
    case CategoryType.Recent:
      return "/rooms/personal/filter";

    case CategoryType.Shared:
      return "/rooms/shared/filter";

    case CategoryType.SharedRoom:
      return `/rooms/shared/${folderId}/filter`;

    case CategoryType.Archive:
      return "/rooms/archived/filter";

    case CategoryType.ArchivedRoom:
      return `/rooms/archived/${folderId}/filter`;

    case CategoryType.Favorite:
      return "/files/favorite/filter";

    case CategoryType.Trash:
      return "/files/trash/filter";

    case CategoryType.PublicRoom:
      return "/rooms/share";

    case CategoryType.Accounts:
      return "/accounts";

    case CategoryType.Settings:
      return "/settings/personal";

    default:
      throw new Error("Unknown category type");
  }
};
